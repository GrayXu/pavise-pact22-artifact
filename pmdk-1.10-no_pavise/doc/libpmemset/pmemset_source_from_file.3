.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "" "" "2022-08-10" "PMDK - " "PMDK Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-3-Clause
.\" Copyright 2020-2021, Intel Corporation
.SH NAME
.PP
\f[B]pmemset_source_from_file\f[]() \- creates an instance of persistent
memory data source
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmemset.h>

int\ pmemset_source_from_file(struct\ pmemset_source\ **src,\ const\ char\ *file);
int\ pmemset_xsource_from_file(struct\ pmemset_source\ **src,\ const\ char\ *file,\ uint64_t\ flags);
int\ pmemset_source_delete(struct\ pmemset_source\ **src);
\f[]
.fi
.SH DESCRIPTION
.PP
\f[B]pmemset_source_from_file\f[]() function instantiates a new *struct
pmemset_source\f[B] object describing the data source and sets a path to
the file in it. \f[]pmemset_xsource_from_file\f[B]() is equivalent to
\f[]pmemset_source_from_file**(), but with additional \f[I]flags\f[]
argument that is a bitmask of the following values:
.IP \[bu] 2
\f[B]PMEMSET_SOURCE_FILE_CREATE_IF_NEEDED\f[] \- a new file will be
created only if the specified file does not already exist,
.IP \[bu] 2
\f[B]PMEMSET_SOURCE_FILE_CREATE_ALWAYS\f[] \- always a new file will be
created.
If the specified file exists, the file will be overwritten,
.IP \[bu] 2
\f[B]PMEMSET_SOURCE_FILE_DO_NOT_GROW\f[] \- the specified file will not
be extended during \f[B]pmemset_map\f[](3).
The file is extended to designated part size and offset by default.
.IP \[bu] 2
\f[B]PMEMSET_SOURCE_FILE_CREATE_MODE(mode)\f[] \- the \f[I]mode\f[]
argument specifies the file mode to be applied when a new file is
created.
This macro should be applied using bitwise OR operator with the above
create \f[I]flags\f[].
The following \f[I]mode\f[] values are available: *
\f[B]PMEMSET_SOURCE_FILE_RWXU_MODE\f[] \- user has read, write, and
execute permission * \f[B]PMEMSET_SOURCE_FILE_RWU_MODE\f[] \- user has
read, write permission * \f[B]PMEMSET_SOURCE_FILE_RUSR_MODE\f[] \- user
has read permission * \f[B]PMEMSET_SOURCE_FILE_WUSR_MODE\f[] \- user has
write permission * \f[B]PMEMSET_SOURCE_FILE_XUSR_MODE\f[] \- user has
execute permission * \f[B]PMEMSET_SOURCE_FILE_RWXG_MODE\f[] \- group has
read, write, and execute permission *
\f[B]PMEMSET_SOURCE_FILE_RWG_MODE\f[] \- group has read, write
permission * \f[B]PMEMSET_SOURCE_FILE_RGRP_MODE\f[] \- group has read
permission * \f[B]PMEMSET_SOURCE_FILE_WGRP_MODE\f[] \- group has write
permission * \f[B]PMEMSET_SOURCE_FILE_XGRP_MODE\f[] \- group has execute
permission * \f[B]PMEMSET_SOURCE_FILE_RWXO_MODE\f[] \- others have read,
write, and execute permission * \f[B]PMEMSET_SOURCE_FILE_RWXO_MODE\f[]
\- others have read, write permission *
\f[B]PMEMSET_SOURCE_FILE_ROTH_MODE\f[] \- others have read permission *
\f[B]PMEMSET_SOURCE_FILE_WOTH_MODE\f[] \- others have write permission *
\f[B]PMEMSET_SOURCE_FILE_XOTH_MODE\f[] \- others have execute permission
.PP
The \f[I]mode\f[] value can also be passed as an octal number.
.PP
If \f[I]PMEMSET_SOURCE_FILE_CREATE_MODE(mode)\f[] is not specified then
the default file mode is set to RW for user and R for group and others.
.IP \[bu] 2
\f[B]PMEMSET_SOURCE_FILE_CREATE_ALWAYS_MODE(mode)\f[] \- simplified
version of PMEMSET_SOURCE_FILE_CREATE_MODE and
PMEMSET_SOURCE_FILE_CREATE_ALWAYS flag.
.PP
For example:
.IP
.nf
\f[C]
\ \ \ \ /*\ bitwise\ OR\ flag\ with\ mode\ values\ */
\ \ \ \ uint64_t\ flags\ =\ PMEMSET_SOURCE_FILE_CREATE_ALWAYS\ |\ \\
\ \ \ \ \ \ \ \ PMEMSET_SOURCE_FILE_CREATE_MODE(PMEMSET_SOURCE_FILE_WUSR_MODE);
\ \ \ \ pmemset_xsource_from_file(&src,\ file,\ flags);

\ \ \ \ /*\ or\ simplified\ version\ */
\ \ \ \ flags\ =\ PMEMSET_SOURCE_FILE_CREATE_ALWAYS_MODE(PMEMSET_SOURCE_FILE_WUSR_MODE);
\ \ \ \ pmemset_xsource_from_file(&src,\ file,\ flags);

\ \ \ \ /*\ or\ version\ with\ numeric\ octal\ mode\ value*/
\ \ \ \ flags\ =\ PMEMSET_SOURCE_FILE_CREATE_ALWAYS_MODE(00200);
\ \ \ \ pmemset_xsource_from_file(&src,\ file,\ flags);
\f[]
.fi
.RS
.PP
NOTE: The \f[I]mode\f[] argument is not supported on Windows.
Using \f[I]mode\f[] values with
\f[I]PMEMSET_SOURCE_FILE_CREATE_MODE(mode)\f[] has no effects.
.RE
.PP
Obtained source is ready to be passed on to the
\f[B]pmemset_map_config_new\f[]() function.
See \f[B]pmemset_map_config_new\f[](3) for details.
.PP
The \f[B]pmemset_source_delete\f[]() function frees \f[I]*src\f[] and
sets \f[I]*src\f[] to NULL.
If \f[I]*src\f[] is NULL, no operation is performed.
.SH RETURN VALUE
.PP
The \f[B]pmemset_source_from_file\f[]() and
\f[B]pmemset_xsource_from_file\f[]() functions return 0 on success or
negative error code on failure.
.PP
The \f[B]pmemset_source_delete\f[]() function always returns 0.
.SH ERRORS
.PP
The \f[B]pmemset_source_from_file\f[]() and
\f[B]pmemset_xsource_from_file\f[]() can fail with the following errors:
.IP \[bu] 2
\f[B]PMEMSET_E_INVALID_SOURCE_PATH\f[] \- when the provided file path
string is NULL.
.IP \[bu] 2
\f[B]\-ENOMEM\f[] \- in case of insufficient memory to allocate an
instance of \f[I]struct pmemset_source\f[].
.PP
The \f[B]pmemset_xsource_from_file\f[]() can also fail with the error:
.IP \[bu] 2
\f[B]PMEMSET_E_INVALID_SOURCE_FILE_CREATE_FLAGS\f[] \- in case of
invalid \f[I]flags\f[] or \f[I]mode\f[] parameter.
.SH SEE ALSO
.PP
\f[B]pmemset_map\f[](3), \f[B]pmemset_map_config_new\f[](3),
\f[B]libpmemset\f[](7) and \f[B]<http://pmem.io>\f[]
