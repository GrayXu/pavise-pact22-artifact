.\" Automatically generated by Pandoc 1.19.2.4
.\"
.TH "" "" "2022-08-10" "PMDK - " "PMDK Programmer's Manual"
.hy
.\" SPDX-License-Identifier: BSD-3-Clause
.\" Copyright 2021, Intel Corporation
.SH NAME
.PP
\f[B]pmemset_map\f[]() \- creates a part mapping
.SH SYNOPSIS
.IP
.nf
\f[C]
#include\ <libpmemset.h>

struct\ pmemset;
struct\ pmemset_map_config;
struct\ pmemset_part_descriptor;
struct\ pmemset_source;
int\ pmemset_map(struct\ pmemset\ *set,
\ \ \ \ \ \ \ \ struct\ pmemset_source\ *src,
\ \ \ \ \ \ \ \ struct\ pmemset_map_config\ *map_cfg,
\ \ \ \ \ \ \ \ struct\ pmemset_part_descriptor\ *desc);
\f[]
.fi
.SH DESCRIPTION
.PP
The \f[B]pmemset_map\f[]() function creates new mapping in the virtual
address space of the calling process and adds structure describing this
mapping to the pmemset.
It requires an address of a pointer to initialized set, created using
\f[B]pmemset_new\f[](3) function and optionally a map configuration
provided in the \f[I]map_cfg\f[] parameter.
A map configuration can be created using
\f[B]pmemset_map_config_new\f[](3) function.
Specifying \f[I]map_cfg\f[] in \f[B]pmemset_map\f[] function allows the
mapping length and offset to be defined.
If \f[I]map_cfg\f[] is NULL then the whole source from \f[I]src\f[] is
mapped.
The mapping can later be retrieved using
\f[B]pmemset_first_part_map\f[](3), \f[B]pmemset_next_part_map\f[](3)
and \f[B]pmemset_part_map_by_address\f[](3) functions.
.PP
New mapping is created based on the source specified in the
\f[I]*src\f[] pointer.
For the operation to succeed the \f[I]src\f[] structure cannot be a
\f[I]NULL\f[] value and must be created from a valid data source.
See \f[B]pmemset_source_from_file\f[](3) and
\f[B]pmemset_source_from_pmem2\f[](3) for possible sources.
.PP
Optionally \f[B]pmemset_map\f[]() function can take a part descriptor
object passed via \f[I]desc\f[] parameter.
If an optional descriptor was provided then address and size of the
mapping are stored in the descriptor when this function succeeds.
.PP
Before the initialization of pmemset, a virtual memory reservation can
be set in its config structure.
This limits the future part mappings of initialized pmemset to the
virtual address space spanned by the provided reservation.
Provided reservation\[aq]s address and size will not be changed on
pmemset operations.
For more information about this configuration please see
\f[B]pmemset_config_set_reservation\f[](3).
.PP
During the lifespan of initialized pmemset, a contiguous part coalescing
feature value can be set using
\f[B]pmemset_set_contiguous_part_coalescing\f[]() function, modifying
the default behavior of part mapping.
With contiguous part coalescing feature enabled, \f[B]pmemset_map\f[]()
function tries to map each new part at the virtual memory region that is
situated right after the previous mapped part memory range.
.PP
Values set in the source \f[I]src\f[] can enable additional
functionalities used during \f[B]pmemset_map\f[]() function.
.PP
When source \f[I]src\f[] has an SDS set, then \f[B]pmemset_map\f[]()
operation evaluates \f[I]shutdown state\f[] of the source and compares
it with acceptable states provided by the user.
This can terminate mapping operation.
For details, see \f[B]pmemset_source_set_sds\f[](3).
.PP
When source \f[I]src\f[] has a bad block detection feature set using
\f[B]pmemset_source_set_badblock_detection\f[](3), then
\f[B]pmemset_map\f[]() operation searches for bad blocks in the
\f[I]src\f[] and fires \f[B]PMEMSET_EVENT_BADBLOCK\f[] event for each
bad block found.
This can terminate mapping operation.
Encountered bad blocks can be retrieved and cleared via event callback
function, for details see \f[B]pmemset_config_set_event_callback\f[](3).
If all bad blocks are immediately cleared in event callback function,
then a \f[B]PMEMSET_EVENT_BADBLOCKS_CLEARED\f[] event is fired.
For bad blocks clearing, see \f[B]pmemset_badblock_clear\f[](3).
.SH RETURN VALUE
.PP
The \f[B]pmemset_map\f[]() function returns 0 on success or a negative
error code on failure.
.SH ERRORS
.PP
The \f[B]pmemset_map\f[]() can fail with the following errors:
.IP \[bu] 2
\f[B]PMEMSET_E_CANNOT_ALLOCATE_INTERNAL_STRUCTURE\f[] \- an internal
structure needed by the function cannot be allocated.
.IP \[bu] 2
\f[B]PMEMSET_E_INVALID_OFFSET_VALUE\f[] \- the offset value assigned to
the part is invalid.
Offset value is bigger than INT64_MAX.
.IP \[bu] 2
\f[B]PMEMSET_E_GRANULARITY_NOT_SUPPORTED\f[] \- the granularity stored
in the provided \f[I]map_cfg\f[] defined in \f[I]set\f[] is invalid.
The concept of granularity is explained in \f[B]libpmem2\f[](7) manpage.
.IP \[bu] 2
\f[B]PMEMSET_E_INVALID_PMEM2_MAP\f[] \- the pmem2 mapping that pmemset
mapping relies on cannot be created.
The error code of \f[B]libpmem2\f[](7) error is printed in the logs and
can be checked for further information.
.IP \[bu] 2
\f[B]PMEMSET_E_INVALID_SOURCE_TYPE\f[] \- source \f[I]src\f[] is not a
valid value.
.IP \[bu] 2
\f[B]PMEMSET_E_LENGTH_UNALIGNED\f[] \- the length of the part to be
mapped is not aligned to the allocation granularity.
.IP \[bu] 2
\f[B]PMEMSET_E_CANNOT_COALESCE_PARTS\f[] \- new part couldn\[aq]t be
coalesced with previously mapped part in the pmemset.
The memory range after the ending address of previous mapped part is
occupied.
.IP \[bu] 2
\f[B]PMEMSET_E_CANNOT_GROW_SOURCE_FILE\f[] \- in case of
\f[B]pmemset_source_from_temporary\f[](3) or
\f[B]pmemset_xsource_from_file\f[](3), temporary file created in
\f[I]dir\f[] cannot be extended for the defined part size and offset.
.IP \[bu] 2
\f[B]\-ENOMEM\f[] \- in case of insufficient memory to allocate an
instance of \f[I]struct pmemset_part_map\f[].
.IP \[bu] 2
\f[B]PMEMSET_E_CANNOT_FIT_PART_MAP\f[] \- in case of pmemset created
from config with a reservation set, provided reservation has no space
for a new part mapping.
.IP \[bu] 2
\f[B]PMEMSET_E_MAP_LENGTH_UNSET\f[] \- the length of the map is unset
and equals zero.
.IP \[bu] 2
\f[B]PMEMSET_E_SOURCE_FILE_IS_TOO_SMALL\f[] \- the size of the source
file could not be extended and is too small for the part to be mapped.
.PP
It can also return \f[B]libpmem2\f[](7) errors from the underlying
functions.
.PP
When SDS feature is set for the source \f[I]src\f[] with
\f[B]pmemset_source_set_sds\f[](3):
.IP \[bu] 2
\f[B]PMEMSET_E_SDS_NOSUPP\f[] \- device that stores the data described
by the \f[I]struct pmemset_source\f[] does not support unsafe shutdown
feature that SDS depends on.
To avoid this error user should not reference the \f[I]struct
pmemset_sds\f[] in the source using \f[B]pmemset_source_set_sds\f[](3)
function.
.IP \[bu] 2
\f[B]PMEMSET_E_SDS_DEVICE_ID_LEN_TOO_BIG\f[] \- device id is too big,
buffer can\[aq]t fit ids with size bigger than
\f[I]PMEMSET_SDS_DEVICE_ID_LEN\f[].
.IP \[bu] 2
\f[B]PMEMSET_E_UNDESIRABLE_PART_STATE\f[] \- determined state of the
part to be mapped does not match any of the acceptable states set in the
SDS structure.
For more information please see
\f[B]pmemset_config_set_acceptable_states\f[](3).
.PP
When bad block detection feature is set for source \f[I]src\f[] with
\f[B]pmemset_source_set_badblock_detection\f[](3):
.IP \[bu] 2
\f[B]PMEMSET_E_IO_FAIL\f[] \- operation encountered at least one bad
block.
This error can be avoided if user immediately clears encountered bad
blocks in the event callback function.
For details, see \f[B]pmemset_config_set_event_callback\f[](3).
.IP \[bu] 2
\f[B]PMEMSET_E_DAX_REGION_NOT_FOUND\f[] \- cannot find a DAX region for
the given \f[I]src\f[].
.IP \[bu] 2
\f[B]PMEMSET_E_CANNOT_READ_BOUNDS\f[] \- cannot read offset or size of
the namespace of the given \f[I]src\f[].
.IP \[bu] 2
\f[B]PMEMSET_E_BADBLOCK_NOSUPP\f[] \- bad block handling isn\[aq]t
supported on this OS.
.IP \[bu] 2
\f[B]\-errno\f[] \- set by failing underlying
\f[B]pmem2_badblock_context_new\f[](3) function.
.SH SEE ALSO
.PP
\f[B]pmemset_badblock_clear\f[](3),
\f[B]pmemset_config_set_acceptable_states\f[](3),
\f[B]pmemset_config_set_event_callback\f[](3),
\f[B]pmemset_config_set_reservation\f[](3),
\f[B]pmemset_first_part_map\f[](3), \f[B]pmemset_next_part_map\f[](3),
\f[B]pmemset_part_map_by_address\f[](3),
\f[B]pmemset_set_contiguous_part_coalescing\f[](3),
\f[B]pmemset_source_from_file\f[](3),
\f[B]pmemset_source_from_pmem2\f[](3),
\f[B]pmemset_source_from_temporary\f[](3),
\f[B]pmemset_source_set_badblock_detection\f[](3),
\f[B]pmemset_source_set_sds\f[](3),
\f[B]pmemset_xsource_from_file\f[](3), \f[B]libpmem2\f[](7),
\f[B]libpmemset\f[](7) and \f[B]<http://pmem.io>\f[]
